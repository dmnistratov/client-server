// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TestTask {
namespace Messages {

namespace {

const ::google::protobuf::Descriptor* WrapperMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WrapperMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FastResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FastResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlowResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlowResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestForFastResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestForFastResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestForSlowResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestForSlowResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fmessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fmessages_2eproto() {
  protobuf_AddDesc_proto_2fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/messages.proto");
  GOOGLE_CHECK(file != NULL);
  WrapperMessage_descriptor_ = file->message_type(0);
  static const int WrapperMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrapperMessage, fast_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrapperMessage, slow_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrapperMessage, request_for_fast_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrapperMessage, request_for_slow_response_),
  };
  WrapperMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WrapperMessage_descriptor_,
      WrapperMessage::default_instance_,
      WrapperMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrapperMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(WrapperMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrapperMessage, _internal_metadata_),
      -1);
  FastResponse_descriptor_ = file->message_type(1);
  static const int FastResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastResponse, current_date_time_),
  };
  FastResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FastResponse_descriptor_,
      FastResponse::default_instance_,
      FastResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(FastResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastResponse, _internal_metadata_),
      -1);
  SlowResponse_descriptor_ = file->message_type(2);
  static const int SlowResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowResponse, connected_client_count_),
  };
  SlowResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SlowResponse_descriptor_,
      SlowResponse::default_instance_,
      SlowResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(SlowResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowResponse, _internal_metadata_),
      -1);
  RequestForFastResponse_descriptor_ = file->message_type(3);
  static const int RequestForFastResponse_offsets_[1] = {
  };
  RequestForFastResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestForFastResponse_descriptor_,
      RequestForFastResponse::default_instance_,
      RequestForFastResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestForFastResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestForFastResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestForFastResponse, _internal_metadata_),
      -1);
  RequestForSlowResponse_descriptor_ = file->message_type(4);
  static const int RequestForSlowResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestForSlowResponse, time_in_seconds_to_sleep_),
  };
  RequestForSlowResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestForSlowResponse_descriptor_,
      RequestForSlowResponse::default_instance_,
      RequestForSlowResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestForSlowResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestForSlowResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestForSlowResponse, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WrapperMessage_descriptor_, &WrapperMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FastResponse_descriptor_, &FastResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SlowResponse_descriptor_, &SlowResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestForFastResponse_descriptor_, &RequestForFastResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestForSlowResponse_descriptor_, &RequestForSlowResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fmessages_2eproto() {
  delete WrapperMessage::default_instance_;
  delete WrapperMessage_reflection_;
  delete FastResponse::default_instance_;
  delete FastResponse_reflection_;
  delete SlowResponse::default_instance_;
  delete SlowResponse_reflection_;
  delete RequestForFastResponse::default_instance_;
  delete RequestForFastResponse_reflection_;
  delete RequestForSlowResponse::default_instance_;
  delete RequestForSlowResponse_reflection_;
}

void protobuf_AddDesc_proto_2fmessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024proto/messages.proto\022\021TestTask.Message"
    "s\"\234\002\n\016WrapperMessage\0226\n\rfast_response\030\001 "
    "\001(\0132\037.TestTask.Messages.FastResponse\0226\n\r"
    "slow_response\030\002 \001(\0132\037.TestTask.Messages."
    "SlowResponse\022L\n\031request_for_fast_respons"
    "e\030\003 \001(\0132).TestTask.Messages.RequestForFa"
    "stResponse\022L\n\031request_for_slow_response\030"
    "\004 \001(\0132).TestTask.Messages.RequestForSlow"
    "Response\")\n\014FastResponse\022\031\n\021current_date"
    "_time\030\001 \002(\t\".\n\014SlowResponse\022\036\n\026connected"
    "_client_count\030\001 \002(\r\"\030\n\026RequestForFastRes"
    "ponse\":\n\026RequestForSlowResponse\022 \n\030time_"
    "in_seconds_to_sleep\030\001 \002(\r", 505);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/messages.proto", &protobuf_RegisterTypes);
  WrapperMessage::default_instance_ = new WrapperMessage();
  FastResponse::default_instance_ = new FastResponse();
  SlowResponse::default_instance_ = new SlowResponse();
  RequestForFastResponse::default_instance_ = new RequestForFastResponse();
  RequestForSlowResponse::default_instance_ = new RequestForSlowResponse();
  WrapperMessage::default_instance_->InitAsDefaultInstance();
  FastResponse::default_instance_->InitAsDefaultInstance();
  SlowResponse::default_instance_->InitAsDefaultInstance();
  RequestForFastResponse::default_instance_->InitAsDefaultInstance();
  RequestForSlowResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fmessages_2eproto {
  StaticDescriptorInitializer_proto_2fmessages_2eproto() {
    protobuf_AddDesc_proto_2fmessages_2eproto();
  }
} static_descriptor_initializer_proto_2fmessages_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WrapperMessage::kFastResponseFieldNumber;
const int WrapperMessage::kSlowResponseFieldNumber;
const int WrapperMessage::kRequestForFastResponseFieldNumber;
const int WrapperMessage::kRequestForSlowResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WrapperMessage::WrapperMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TestTask.Messages.WrapperMessage)
}

void WrapperMessage::InitAsDefaultInstance() {
  fast_response_ = const_cast< ::TestTask::Messages::FastResponse*>(&::TestTask::Messages::FastResponse::default_instance());
  slow_response_ = const_cast< ::TestTask::Messages::SlowResponse*>(&::TestTask::Messages::SlowResponse::default_instance());
  request_for_fast_response_ = const_cast< ::TestTask::Messages::RequestForFastResponse*>(&::TestTask::Messages::RequestForFastResponse::default_instance());
  request_for_slow_response_ = const_cast< ::TestTask::Messages::RequestForSlowResponse*>(&::TestTask::Messages::RequestForSlowResponse::default_instance());
}

WrapperMessage::WrapperMessage(const WrapperMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TestTask.Messages.WrapperMessage)
}

void WrapperMessage::SharedCtor() {
  _cached_size_ = 0;
  fast_response_ = NULL;
  slow_response_ = NULL;
  request_for_fast_response_ = NULL;
  request_for_slow_response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WrapperMessage::~WrapperMessage() {
  // @@protoc_insertion_point(destructor:TestTask.Messages.WrapperMessage)
  SharedDtor();
}

void WrapperMessage::SharedDtor() {
  if (this != default_instance_) {
    delete fast_response_;
    delete slow_response_;
    delete request_for_fast_response_;
    delete request_for_slow_response_;
  }
}

void WrapperMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WrapperMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WrapperMessage_descriptor_;
}

const WrapperMessage& WrapperMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fmessages_2eproto();
  return *default_instance_;
}

WrapperMessage* WrapperMessage::default_instance_ = NULL;

WrapperMessage* WrapperMessage::New(::google::protobuf::Arena* arena) const {
  WrapperMessage* n = new WrapperMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WrapperMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TestTask.Messages.WrapperMessage)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_fast_response()) {
      if (fast_response_ != NULL) fast_response_->::TestTask::Messages::FastResponse::Clear();
    }
    if (has_slow_response()) {
      if (slow_response_ != NULL) slow_response_->::TestTask::Messages::SlowResponse::Clear();
    }
    if (has_request_for_fast_response()) {
      if (request_for_fast_response_ != NULL) request_for_fast_response_->::TestTask::Messages::RequestForFastResponse::Clear();
    }
    if (has_request_for_slow_response()) {
      if (request_for_slow_response_ != NULL) request_for_slow_response_->::TestTask::Messages::RequestForSlowResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WrapperMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TestTask.Messages.WrapperMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TestTask.Messages.FastResponse fast_response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fast_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_slow_response;
        break;
      }

      // optional .TestTask.Messages.SlowResponse slow_response = 2;
      case 2: {
        if (tag == 18) {
         parse_slow_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slow_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_request_for_fast_response;
        break;
      }

      // optional .TestTask.Messages.RequestForFastResponse request_for_fast_response = 3;
      case 3: {
        if (tag == 26) {
         parse_request_for_fast_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_for_fast_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_request_for_slow_response;
        break;
      }

      // optional .TestTask.Messages.RequestForSlowResponse request_for_slow_response = 4;
      case 4: {
        if (tag == 34) {
         parse_request_for_slow_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_for_slow_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TestTask.Messages.WrapperMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TestTask.Messages.WrapperMessage)
  return false;
#undef DO_
}

void WrapperMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TestTask.Messages.WrapperMessage)
  // optional .TestTask.Messages.FastResponse fast_response = 1;
  if (has_fast_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->fast_response_, output);
  }

  // optional .TestTask.Messages.SlowResponse slow_response = 2;
  if (has_slow_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->slow_response_, output);
  }

  // optional .TestTask.Messages.RequestForFastResponse request_for_fast_response = 3;
  if (has_request_for_fast_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->request_for_fast_response_, output);
  }

  // optional .TestTask.Messages.RequestForSlowResponse request_for_slow_response = 4;
  if (has_request_for_slow_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->request_for_slow_response_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TestTask.Messages.WrapperMessage)
}

::google::protobuf::uint8* WrapperMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestTask.Messages.WrapperMessage)
  // optional .TestTask.Messages.FastResponse fast_response = 1;
  if (has_fast_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->fast_response_, false, target);
  }

  // optional .TestTask.Messages.SlowResponse slow_response = 2;
  if (has_slow_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->slow_response_, false, target);
  }

  // optional .TestTask.Messages.RequestForFastResponse request_for_fast_response = 3;
  if (has_request_for_fast_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->request_for_fast_response_, false, target);
  }

  // optional .TestTask.Messages.RequestForSlowResponse request_for_slow_response = 4;
  if (has_request_for_slow_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->request_for_slow_response_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestTask.Messages.WrapperMessage)
  return target;
}

int WrapperMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:TestTask.Messages.WrapperMessage)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .TestTask.Messages.FastResponse fast_response = 1;
    if (has_fast_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fast_response_);
    }

    // optional .TestTask.Messages.SlowResponse slow_response = 2;
    if (has_slow_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->slow_response_);
    }

    // optional .TestTask.Messages.RequestForFastResponse request_for_fast_response = 3;
    if (has_request_for_fast_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_for_fast_response_);
    }

    // optional .TestTask.Messages.RequestForSlowResponse request_for_slow_response = 4;
    if (has_request_for_slow_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_for_slow_response_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WrapperMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TestTask.Messages.WrapperMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WrapperMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WrapperMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TestTask.Messages.WrapperMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TestTask.Messages.WrapperMessage)
    MergeFrom(*source);
  }
}

void WrapperMessage::MergeFrom(const WrapperMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TestTask.Messages.WrapperMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fast_response()) {
      mutable_fast_response()->::TestTask::Messages::FastResponse::MergeFrom(from.fast_response());
    }
    if (from.has_slow_response()) {
      mutable_slow_response()->::TestTask::Messages::SlowResponse::MergeFrom(from.slow_response());
    }
    if (from.has_request_for_fast_response()) {
      mutable_request_for_fast_response()->::TestTask::Messages::RequestForFastResponse::MergeFrom(from.request_for_fast_response());
    }
    if (from.has_request_for_slow_response()) {
      mutable_request_for_slow_response()->::TestTask::Messages::RequestForSlowResponse::MergeFrom(from.request_for_slow_response());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WrapperMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TestTask.Messages.WrapperMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WrapperMessage::CopyFrom(const WrapperMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestTask.Messages.WrapperMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrapperMessage::IsInitialized() const {

  if (has_fast_response()) {
    if (!this->fast_response_->IsInitialized()) return false;
  }
  if (has_slow_response()) {
    if (!this->slow_response_->IsInitialized()) return false;
  }
  if (has_request_for_slow_response()) {
    if (!this->request_for_slow_response_->IsInitialized()) return false;
  }
  return true;
}

void WrapperMessage::Swap(WrapperMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WrapperMessage::InternalSwap(WrapperMessage* other) {
  std::swap(fast_response_, other->fast_response_);
  std::swap(slow_response_, other->slow_response_);
  std::swap(request_for_fast_response_, other->request_for_fast_response_);
  std::swap(request_for_slow_response_, other->request_for_slow_response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WrapperMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WrapperMessage_descriptor_;
  metadata.reflection = WrapperMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WrapperMessage

// optional .TestTask.Messages.FastResponse fast_response = 1;
bool WrapperMessage::has_fast_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WrapperMessage::set_has_fast_response() {
  _has_bits_[0] |= 0x00000001u;
}
void WrapperMessage::clear_has_fast_response() {
  _has_bits_[0] &= ~0x00000001u;
}
void WrapperMessage::clear_fast_response() {
  if (fast_response_ != NULL) fast_response_->::TestTask::Messages::FastResponse::Clear();
  clear_has_fast_response();
}
const ::TestTask::Messages::FastResponse& WrapperMessage::fast_response() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.WrapperMessage.fast_response)
  return fast_response_ != NULL ? *fast_response_ : *default_instance_->fast_response_;
}
::TestTask::Messages::FastResponse* WrapperMessage::mutable_fast_response() {
  set_has_fast_response();
  if (fast_response_ == NULL) {
    fast_response_ = new ::TestTask::Messages::FastResponse;
  }
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.WrapperMessage.fast_response)
  return fast_response_;
}
::TestTask::Messages::FastResponse* WrapperMessage::release_fast_response() {
  // @@protoc_insertion_point(field_release:TestTask.Messages.WrapperMessage.fast_response)
  clear_has_fast_response();
  ::TestTask::Messages::FastResponse* temp = fast_response_;
  fast_response_ = NULL;
  return temp;
}
void WrapperMessage::set_allocated_fast_response(::TestTask::Messages::FastResponse* fast_response) {
  delete fast_response_;
  fast_response_ = fast_response;
  if (fast_response) {
    set_has_fast_response();
  } else {
    clear_has_fast_response();
  }
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.WrapperMessage.fast_response)
}

// optional .TestTask.Messages.SlowResponse slow_response = 2;
bool WrapperMessage::has_slow_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WrapperMessage::set_has_slow_response() {
  _has_bits_[0] |= 0x00000002u;
}
void WrapperMessage::clear_has_slow_response() {
  _has_bits_[0] &= ~0x00000002u;
}
void WrapperMessage::clear_slow_response() {
  if (slow_response_ != NULL) slow_response_->::TestTask::Messages::SlowResponse::Clear();
  clear_has_slow_response();
}
const ::TestTask::Messages::SlowResponse& WrapperMessage::slow_response() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.WrapperMessage.slow_response)
  return slow_response_ != NULL ? *slow_response_ : *default_instance_->slow_response_;
}
::TestTask::Messages::SlowResponse* WrapperMessage::mutable_slow_response() {
  set_has_slow_response();
  if (slow_response_ == NULL) {
    slow_response_ = new ::TestTask::Messages::SlowResponse;
  }
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.WrapperMessage.slow_response)
  return slow_response_;
}
::TestTask::Messages::SlowResponse* WrapperMessage::release_slow_response() {
  // @@protoc_insertion_point(field_release:TestTask.Messages.WrapperMessage.slow_response)
  clear_has_slow_response();
  ::TestTask::Messages::SlowResponse* temp = slow_response_;
  slow_response_ = NULL;
  return temp;
}
void WrapperMessage::set_allocated_slow_response(::TestTask::Messages::SlowResponse* slow_response) {
  delete slow_response_;
  slow_response_ = slow_response;
  if (slow_response) {
    set_has_slow_response();
  } else {
    clear_has_slow_response();
  }
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.WrapperMessage.slow_response)
}

// optional .TestTask.Messages.RequestForFastResponse request_for_fast_response = 3;
bool WrapperMessage::has_request_for_fast_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WrapperMessage::set_has_request_for_fast_response() {
  _has_bits_[0] |= 0x00000004u;
}
void WrapperMessage::clear_has_request_for_fast_response() {
  _has_bits_[0] &= ~0x00000004u;
}
void WrapperMessage::clear_request_for_fast_response() {
  if (request_for_fast_response_ != NULL) request_for_fast_response_->::TestTask::Messages::RequestForFastResponse::Clear();
  clear_has_request_for_fast_response();
}
const ::TestTask::Messages::RequestForFastResponse& WrapperMessage::request_for_fast_response() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.WrapperMessage.request_for_fast_response)
  return request_for_fast_response_ != NULL ? *request_for_fast_response_ : *default_instance_->request_for_fast_response_;
}
::TestTask::Messages::RequestForFastResponse* WrapperMessage::mutable_request_for_fast_response() {
  set_has_request_for_fast_response();
  if (request_for_fast_response_ == NULL) {
    request_for_fast_response_ = new ::TestTask::Messages::RequestForFastResponse;
  }
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.WrapperMessage.request_for_fast_response)
  return request_for_fast_response_;
}
::TestTask::Messages::RequestForFastResponse* WrapperMessage::release_request_for_fast_response() {
  // @@protoc_insertion_point(field_release:TestTask.Messages.WrapperMessage.request_for_fast_response)
  clear_has_request_for_fast_response();
  ::TestTask::Messages::RequestForFastResponse* temp = request_for_fast_response_;
  request_for_fast_response_ = NULL;
  return temp;
}
void WrapperMessage::set_allocated_request_for_fast_response(::TestTask::Messages::RequestForFastResponse* request_for_fast_response) {
  delete request_for_fast_response_;
  request_for_fast_response_ = request_for_fast_response;
  if (request_for_fast_response) {
    set_has_request_for_fast_response();
  } else {
    clear_has_request_for_fast_response();
  }
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.WrapperMessage.request_for_fast_response)
}

// optional .TestTask.Messages.RequestForSlowResponse request_for_slow_response = 4;
bool WrapperMessage::has_request_for_slow_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WrapperMessage::set_has_request_for_slow_response() {
  _has_bits_[0] |= 0x00000008u;
}
void WrapperMessage::clear_has_request_for_slow_response() {
  _has_bits_[0] &= ~0x00000008u;
}
void WrapperMessage::clear_request_for_slow_response() {
  if (request_for_slow_response_ != NULL) request_for_slow_response_->::TestTask::Messages::RequestForSlowResponse::Clear();
  clear_has_request_for_slow_response();
}
const ::TestTask::Messages::RequestForSlowResponse& WrapperMessage::request_for_slow_response() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.WrapperMessage.request_for_slow_response)
  return request_for_slow_response_ != NULL ? *request_for_slow_response_ : *default_instance_->request_for_slow_response_;
}
::TestTask::Messages::RequestForSlowResponse* WrapperMessage::mutable_request_for_slow_response() {
  set_has_request_for_slow_response();
  if (request_for_slow_response_ == NULL) {
    request_for_slow_response_ = new ::TestTask::Messages::RequestForSlowResponse;
  }
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.WrapperMessage.request_for_slow_response)
  return request_for_slow_response_;
}
::TestTask::Messages::RequestForSlowResponse* WrapperMessage::release_request_for_slow_response() {
  // @@protoc_insertion_point(field_release:TestTask.Messages.WrapperMessage.request_for_slow_response)
  clear_has_request_for_slow_response();
  ::TestTask::Messages::RequestForSlowResponse* temp = request_for_slow_response_;
  request_for_slow_response_ = NULL;
  return temp;
}
void WrapperMessage::set_allocated_request_for_slow_response(::TestTask::Messages::RequestForSlowResponse* request_for_slow_response) {
  delete request_for_slow_response_;
  request_for_slow_response_ = request_for_slow_response;
  if (request_for_slow_response) {
    set_has_request_for_slow_response();
  } else {
    clear_has_request_for_slow_response();
  }
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.WrapperMessage.request_for_slow_response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FastResponse::kCurrentDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FastResponse::FastResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TestTask.Messages.FastResponse)
}

void FastResponse::InitAsDefaultInstance() {
}

FastResponse::FastResponse(const FastResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TestTask.Messages.FastResponse)
}

void FastResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  current_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FastResponse::~FastResponse() {
  // @@protoc_insertion_point(destructor:TestTask.Messages.FastResponse)
  SharedDtor();
}

void FastResponse::SharedDtor() {
  current_date_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FastResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FastResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FastResponse_descriptor_;
}

const FastResponse& FastResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fmessages_2eproto();
  return *default_instance_;
}

FastResponse* FastResponse::default_instance_ = NULL;

FastResponse* FastResponse::New(::google::protobuf::Arena* arena) const {
  FastResponse* n = new FastResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FastResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:TestTask.Messages.FastResponse)
  if (has_current_date_time()) {
    current_date_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FastResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TestTask.Messages.FastResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string current_date_time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_date_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->current_date_time().data(), this->current_date_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TestTask.Messages.FastResponse.current_date_time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TestTask.Messages.FastResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TestTask.Messages.FastResponse)
  return false;
#undef DO_
}

void FastResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TestTask.Messages.FastResponse)
  // required string current_date_time = 1;
  if (has_current_date_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->current_date_time().data(), this->current_date_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TestTask.Messages.FastResponse.current_date_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->current_date_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TestTask.Messages.FastResponse)
}

::google::protobuf::uint8* FastResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestTask.Messages.FastResponse)
  // required string current_date_time = 1;
  if (has_current_date_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->current_date_time().data(), this->current_date_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TestTask.Messages.FastResponse.current_date_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->current_date_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestTask.Messages.FastResponse)
  return target;
}

int FastResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:TestTask.Messages.FastResponse)
  int total_size = 0;

  // required string current_date_time = 1;
  if (has_current_date_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->current_date_time());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FastResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TestTask.Messages.FastResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FastResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FastResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TestTask.Messages.FastResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TestTask.Messages.FastResponse)
    MergeFrom(*source);
  }
}

void FastResponse::MergeFrom(const FastResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TestTask.Messages.FastResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_date_time()) {
      set_has_current_date_time();
      current_date_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_date_time_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FastResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TestTask.Messages.FastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastResponse::CopyFrom(const FastResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestTask.Messages.FastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FastResponse::Swap(FastResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FastResponse::InternalSwap(FastResponse* other) {
  current_date_time_.Swap(&other->current_date_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FastResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FastResponse_descriptor_;
  metadata.reflection = FastResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FastResponse

// required string current_date_time = 1;
bool FastResponse::has_current_date_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FastResponse::set_has_current_date_time() {
  _has_bits_[0] |= 0x00000001u;
}
void FastResponse::clear_has_current_date_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void FastResponse::clear_current_date_time() {
  current_date_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_current_date_time();
}
 const ::std::string& FastResponse::current_date_time() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.FastResponse.current_date_time)
  return current_date_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FastResponse::set_current_date_time(const ::std::string& value) {
  set_has_current_date_time();
  current_date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TestTask.Messages.FastResponse.current_date_time)
}
 void FastResponse::set_current_date_time(const char* value) {
  set_has_current_date_time();
  current_date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TestTask.Messages.FastResponse.current_date_time)
}
 void FastResponse::set_current_date_time(const char* value, size_t size) {
  set_has_current_date_time();
  current_date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TestTask.Messages.FastResponse.current_date_time)
}
 ::std::string* FastResponse::mutable_current_date_time() {
  set_has_current_date_time();
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.FastResponse.current_date_time)
  return current_date_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FastResponse::release_current_date_time() {
  // @@protoc_insertion_point(field_release:TestTask.Messages.FastResponse.current_date_time)
  clear_has_current_date_time();
  return current_date_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FastResponse::set_allocated_current_date_time(::std::string* current_date_time) {
  if (current_date_time != NULL) {
    set_has_current_date_time();
  } else {
    clear_has_current_date_time();
  }
  current_date_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_date_time);
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.FastResponse.current_date_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SlowResponse::kConnectedClientCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SlowResponse::SlowResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TestTask.Messages.SlowResponse)
}

void SlowResponse::InitAsDefaultInstance() {
}

SlowResponse::SlowResponse(const SlowResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TestTask.Messages.SlowResponse)
}

void SlowResponse::SharedCtor() {
  _cached_size_ = 0;
  connected_client_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlowResponse::~SlowResponse() {
  // @@protoc_insertion_point(destructor:TestTask.Messages.SlowResponse)
  SharedDtor();
}

void SlowResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlowResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlowResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlowResponse_descriptor_;
}

const SlowResponse& SlowResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fmessages_2eproto();
  return *default_instance_;
}

SlowResponse* SlowResponse::default_instance_ = NULL;

SlowResponse* SlowResponse::New(::google::protobuf::Arena* arena) const {
  SlowResponse* n = new SlowResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SlowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:TestTask.Messages.SlowResponse)
  connected_client_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SlowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TestTask.Messages.SlowResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 connected_client_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connected_client_count_)));
          set_has_connected_client_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TestTask.Messages.SlowResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TestTask.Messages.SlowResponse)
  return false;
#undef DO_
}

void SlowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TestTask.Messages.SlowResponse)
  // required uint32 connected_client_count = 1;
  if (has_connected_client_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->connected_client_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TestTask.Messages.SlowResponse)
}

::google::protobuf::uint8* SlowResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestTask.Messages.SlowResponse)
  // required uint32 connected_client_count = 1;
  if (has_connected_client_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->connected_client_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestTask.Messages.SlowResponse)
  return target;
}

int SlowResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:TestTask.Messages.SlowResponse)
  int total_size = 0;

  // required uint32 connected_client_count = 1;
  if (has_connected_client_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->connected_client_count());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlowResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TestTask.Messages.SlowResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SlowResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SlowResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TestTask.Messages.SlowResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TestTask.Messages.SlowResponse)
    MergeFrom(*source);
  }
}

void SlowResponse::MergeFrom(const SlowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TestTask.Messages.SlowResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connected_client_count()) {
      set_connected_client_count(from.connected_client_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SlowResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TestTask.Messages.SlowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlowResponse::CopyFrom(const SlowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestTask.Messages.SlowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlowResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SlowResponse::Swap(SlowResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SlowResponse::InternalSwap(SlowResponse* other) {
  std::swap(connected_client_count_, other->connected_client_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SlowResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlowResponse_descriptor_;
  metadata.reflection = SlowResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SlowResponse

// required uint32 connected_client_count = 1;
bool SlowResponse::has_connected_client_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SlowResponse::set_has_connected_client_count() {
  _has_bits_[0] |= 0x00000001u;
}
void SlowResponse::clear_has_connected_client_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void SlowResponse::clear_connected_client_count() {
  connected_client_count_ = 0u;
  clear_has_connected_client_count();
}
 ::google::protobuf::uint32 SlowResponse::connected_client_count() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.SlowResponse.connected_client_count)
  return connected_client_count_;
}
 void SlowResponse::set_connected_client_count(::google::protobuf::uint32 value) {
  set_has_connected_client_count();
  connected_client_count_ = value;
  // @@protoc_insertion_point(field_set:TestTask.Messages.SlowResponse.connected_client_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestForFastResponse::RequestForFastResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TestTask.Messages.RequestForFastResponse)
}

void RequestForFastResponse::InitAsDefaultInstance() {
}

RequestForFastResponse::RequestForFastResponse(const RequestForFastResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TestTask.Messages.RequestForFastResponse)
}

void RequestForFastResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestForFastResponse::~RequestForFastResponse() {
  // @@protoc_insertion_point(destructor:TestTask.Messages.RequestForFastResponse)
  SharedDtor();
}

void RequestForFastResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestForFastResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestForFastResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestForFastResponse_descriptor_;
}

const RequestForFastResponse& RequestForFastResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fmessages_2eproto();
  return *default_instance_;
}

RequestForFastResponse* RequestForFastResponse::default_instance_ = NULL;

RequestForFastResponse* RequestForFastResponse::New(::google::protobuf::Arena* arena) const {
  RequestForFastResponse* n = new RequestForFastResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestForFastResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:TestTask.Messages.RequestForFastResponse)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestForFastResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TestTask.Messages.RequestForFastResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TestTask.Messages.RequestForFastResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TestTask.Messages.RequestForFastResponse)
  return false;
#undef DO_
}

void RequestForFastResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TestTask.Messages.RequestForFastResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TestTask.Messages.RequestForFastResponse)
}

::google::protobuf::uint8* RequestForFastResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestTask.Messages.RequestForFastResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestTask.Messages.RequestForFastResponse)
  return target;
}

int RequestForFastResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:TestTask.Messages.RequestForFastResponse)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestForFastResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TestTask.Messages.RequestForFastResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestForFastResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestForFastResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TestTask.Messages.RequestForFastResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TestTask.Messages.RequestForFastResponse)
    MergeFrom(*source);
  }
}

void RequestForFastResponse::MergeFrom(const RequestForFastResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TestTask.Messages.RequestForFastResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestForFastResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TestTask.Messages.RequestForFastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestForFastResponse::CopyFrom(const RequestForFastResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestTask.Messages.RequestForFastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestForFastResponse::IsInitialized() const {

  return true;
}

void RequestForFastResponse::Swap(RequestForFastResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestForFastResponse::InternalSwap(RequestForFastResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestForFastResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestForFastResponse_descriptor_;
  metadata.reflection = RequestForFastResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestForFastResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestForSlowResponse::kTimeInSecondsToSleepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestForSlowResponse::RequestForSlowResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TestTask.Messages.RequestForSlowResponse)
}

void RequestForSlowResponse::InitAsDefaultInstance() {
}

RequestForSlowResponse::RequestForSlowResponse(const RequestForSlowResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TestTask.Messages.RequestForSlowResponse)
}

void RequestForSlowResponse::SharedCtor() {
  _cached_size_ = 0;
  time_in_seconds_to_sleep_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestForSlowResponse::~RequestForSlowResponse() {
  // @@protoc_insertion_point(destructor:TestTask.Messages.RequestForSlowResponse)
  SharedDtor();
}

void RequestForSlowResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestForSlowResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestForSlowResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestForSlowResponse_descriptor_;
}

const RequestForSlowResponse& RequestForSlowResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fmessages_2eproto();
  return *default_instance_;
}

RequestForSlowResponse* RequestForSlowResponse::default_instance_ = NULL;

RequestForSlowResponse* RequestForSlowResponse::New(::google::protobuf::Arena* arena) const {
  RequestForSlowResponse* n = new RequestForSlowResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestForSlowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:TestTask.Messages.RequestForSlowResponse)
  time_in_seconds_to_sleep_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestForSlowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TestTask.Messages.RequestForSlowResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time_in_seconds_to_sleep = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_in_seconds_to_sleep_)));
          set_has_time_in_seconds_to_sleep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TestTask.Messages.RequestForSlowResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TestTask.Messages.RequestForSlowResponse)
  return false;
#undef DO_
}

void RequestForSlowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TestTask.Messages.RequestForSlowResponse)
  // required uint32 time_in_seconds_to_sleep = 1;
  if (has_time_in_seconds_to_sleep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_in_seconds_to_sleep(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TestTask.Messages.RequestForSlowResponse)
}

::google::protobuf::uint8* RequestForSlowResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestTask.Messages.RequestForSlowResponse)
  // required uint32 time_in_seconds_to_sleep = 1;
  if (has_time_in_seconds_to_sleep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_in_seconds_to_sleep(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestTask.Messages.RequestForSlowResponse)
  return target;
}

int RequestForSlowResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:TestTask.Messages.RequestForSlowResponse)
  int total_size = 0;

  // required uint32 time_in_seconds_to_sleep = 1;
  if (has_time_in_seconds_to_sleep()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_in_seconds_to_sleep());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestForSlowResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TestTask.Messages.RequestForSlowResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestForSlowResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestForSlowResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TestTask.Messages.RequestForSlowResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TestTask.Messages.RequestForSlowResponse)
    MergeFrom(*source);
  }
}

void RequestForSlowResponse::MergeFrom(const RequestForSlowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TestTask.Messages.RequestForSlowResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_in_seconds_to_sleep()) {
      set_time_in_seconds_to_sleep(from.time_in_seconds_to_sleep());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestForSlowResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TestTask.Messages.RequestForSlowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestForSlowResponse::CopyFrom(const RequestForSlowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestTask.Messages.RequestForSlowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestForSlowResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestForSlowResponse::Swap(RequestForSlowResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestForSlowResponse::InternalSwap(RequestForSlowResponse* other) {
  std::swap(time_in_seconds_to_sleep_, other->time_in_seconds_to_sleep_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestForSlowResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestForSlowResponse_descriptor_;
  metadata.reflection = RequestForSlowResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestForSlowResponse

// required uint32 time_in_seconds_to_sleep = 1;
bool RequestForSlowResponse::has_time_in_seconds_to_sleep() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestForSlowResponse::set_has_time_in_seconds_to_sleep() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestForSlowResponse::clear_has_time_in_seconds_to_sleep() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestForSlowResponse::clear_time_in_seconds_to_sleep() {
  time_in_seconds_to_sleep_ = 0u;
  clear_has_time_in_seconds_to_sleep();
}
 ::google::protobuf::uint32 RequestForSlowResponse::time_in_seconds_to_sleep() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.RequestForSlowResponse.time_in_seconds_to_sleep)
  return time_in_seconds_to_sleep_;
}
 void RequestForSlowResponse::set_time_in_seconds_to_sleep(::google::protobuf::uint32 value) {
  set_has_time_in_seconds_to_sleep();
  time_in_seconds_to_sleep_ = value;
  // @@protoc_insertion_point(field_set:TestTask.Messages.RequestForSlowResponse.time_in_seconds_to_sleep)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages
}  // namespace TestTask

// @@protoc_insertion_point(global_scope)
