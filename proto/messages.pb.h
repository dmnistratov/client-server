// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/messages.proto

#ifndef PROTOBUF_proto_2fmessages_2eproto__INCLUDED
#define PROTOBUF_proto_2fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace TestTask {
namespace Messages {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fmessages_2eproto();
void protobuf_AssignDesc_proto_2fmessages_2eproto();
void protobuf_ShutdownFile_proto_2fmessages_2eproto();

class FastResponse;
class RequestForFastResponse;
class RequestForSlowResponse;
class SlowResponse;
class WrapperMessage;

// ===================================================================

class WrapperMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TestTask.Messages.WrapperMessage) */ {
 public:
  WrapperMessage();
  virtual ~WrapperMessage();

  WrapperMessage(const WrapperMessage& from);

  inline WrapperMessage& operator=(const WrapperMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WrapperMessage& default_instance();

  void Swap(WrapperMessage* other);

  // implements Message ----------------------------------------------

  inline WrapperMessage* New() const { return New(NULL); }

  WrapperMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WrapperMessage& from);
  void MergeFrom(const WrapperMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WrapperMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TestTask.Messages.FastResponse fast_response = 1;
  bool has_fast_response() const;
  void clear_fast_response();
  static const int kFastResponseFieldNumber = 1;
  const ::TestTask::Messages::FastResponse& fast_response() const;
  ::TestTask::Messages::FastResponse* mutable_fast_response();
  ::TestTask::Messages::FastResponse* release_fast_response();
  void set_allocated_fast_response(::TestTask::Messages::FastResponse* fast_response);

  // optional .TestTask.Messages.SlowResponse slow_response = 2;
  bool has_slow_response() const;
  void clear_slow_response();
  static const int kSlowResponseFieldNumber = 2;
  const ::TestTask::Messages::SlowResponse& slow_response() const;
  ::TestTask::Messages::SlowResponse* mutable_slow_response();
  ::TestTask::Messages::SlowResponse* release_slow_response();
  void set_allocated_slow_response(::TestTask::Messages::SlowResponse* slow_response);

  // optional .TestTask.Messages.RequestForFastResponse request_for_fast_response = 3;
  bool has_request_for_fast_response() const;
  void clear_request_for_fast_response();
  static const int kRequestForFastResponseFieldNumber = 3;
  const ::TestTask::Messages::RequestForFastResponse& request_for_fast_response() const;
  ::TestTask::Messages::RequestForFastResponse* mutable_request_for_fast_response();
  ::TestTask::Messages::RequestForFastResponse* release_request_for_fast_response();
  void set_allocated_request_for_fast_response(::TestTask::Messages::RequestForFastResponse* request_for_fast_response);

  // optional .TestTask.Messages.RequestForSlowResponse request_for_slow_response = 4;
  bool has_request_for_slow_response() const;
  void clear_request_for_slow_response();
  static const int kRequestForSlowResponseFieldNumber = 4;
  const ::TestTask::Messages::RequestForSlowResponse& request_for_slow_response() const;
  ::TestTask::Messages::RequestForSlowResponse* mutable_request_for_slow_response();
  ::TestTask::Messages::RequestForSlowResponse* release_request_for_slow_response();
  void set_allocated_request_for_slow_response(::TestTask::Messages::RequestForSlowResponse* request_for_slow_response);

  // @@protoc_insertion_point(class_scope:TestTask.Messages.WrapperMessage)
 private:
  inline void set_has_fast_response();
  inline void clear_has_fast_response();
  inline void set_has_slow_response();
  inline void clear_has_slow_response();
  inline void set_has_request_for_fast_response();
  inline void clear_has_request_for_fast_response();
  inline void set_has_request_for_slow_response();
  inline void clear_has_request_for_slow_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::TestTask::Messages::FastResponse* fast_response_;
  ::TestTask::Messages::SlowResponse* slow_response_;
  ::TestTask::Messages::RequestForFastResponse* request_for_fast_response_;
  ::TestTask::Messages::RequestForSlowResponse* request_for_slow_response_;
  friend void  protobuf_AddDesc_proto_2fmessages_2eproto();
  friend void protobuf_AssignDesc_proto_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static WrapperMessage* default_instance_;
};
// -------------------------------------------------------------------

class FastResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TestTask.Messages.FastResponse) */ {
 public:
  FastResponse();
  virtual ~FastResponse();

  FastResponse(const FastResponse& from);

  inline FastResponse& operator=(const FastResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FastResponse& default_instance();

  void Swap(FastResponse* other);

  // implements Message ----------------------------------------------

  inline FastResponse* New() const { return New(NULL); }

  FastResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FastResponse& from);
  void MergeFrom(const FastResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FastResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string current_date_time = 1;
  bool has_current_date_time() const;
  void clear_current_date_time();
  static const int kCurrentDateTimeFieldNumber = 1;
  const ::std::string& current_date_time() const;
  void set_current_date_time(const ::std::string& value);
  void set_current_date_time(const char* value);
  void set_current_date_time(const char* value, size_t size);
  ::std::string* mutable_current_date_time();
  ::std::string* release_current_date_time();
  void set_allocated_current_date_time(::std::string* current_date_time);

  // @@protoc_insertion_point(class_scope:TestTask.Messages.FastResponse)
 private:
  inline void set_has_current_date_time();
  inline void clear_has_current_date_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr current_date_time_;
  friend void  protobuf_AddDesc_proto_2fmessages_2eproto();
  friend void protobuf_AssignDesc_proto_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static FastResponse* default_instance_;
};
// -------------------------------------------------------------------

class SlowResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TestTask.Messages.SlowResponse) */ {
 public:
  SlowResponse();
  virtual ~SlowResponse();

  SlowResponse(const SlowResponse& from);

  inline SlowResponse& operator=(const SlowResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SlowResponse& default_instance();

  void Swap(SlowResponse* other);

  // implements Message ----------------------------------------------

  inline SlowResponse* New() const { return New(NULL); }

  SlowResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SlowResponse& from);
  void MergeFrom(const SlowResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SlowResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 connected_client_count = 1;
  bool has_connected_client_count() const;
  void clear_connected_client_count();
  static const int kConnectedClientCountFieldNumber = 1;
  ::google::protobuf::uint32 connected_client_count() const;
  void set_connected_client_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TestTask.Messages.SlowResponse)
 private:
  inline void set_has_connected_client_count();
  inline void clear_has_connected_client_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 connected_client_count_;
  friend void  protobuf_AddDesc_proto_2fmessages_2eproto();
  friend void protobuf_AssignDesc_proto_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static SlowResponse* default_instance_;
};
// -------------------------------------------------------------------

class RequestForFastResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TestTask.Messages.RequestForFastResponse) */ {
 public:
  RequestForFastResponse();
  virtual ~RequestForFastResponse();

  RequestForFastResponse(const RequestForFastResponse& from);

  inline RequestForFastResponse& operator=(const RequestForFastResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestForFastResponse& default_instance();

  void Swap(RequestForFastResponse* other);

  // implements Message ----------------------------------------------

  inline RequestForFastResponse* New() const { return New(NULL); }

  RequestForFastResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestForFastResponse& from);
  void MergeFrom(const RequestForFastResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestForFastResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TestTask.Messages.RequestForFastResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fmessages_2eproto();
  friend void protobuf_AssignDesc_proto_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static RequestForFastResponse* default_instance_;
};
// -------------------------------------------------------------------

class RequestForSlowResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TestTask.Messages.RequestForSlowResponse) */ {
 public:
  RequestForSlowResponse();
  virtual ~RequestForSlowResponse();

  RequestForSlowResponse(const RequestForSlowResponse& from);

  inline RequestForSlowResponse& operator=(const RequestForSlowResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestForSlowResponse& default_instance();

  void Swap(RequestForSlowResponse* other);

  // implements Message ----------------------------------------------

  inline RequestForSlowResponse* New() const { return New(NULL); }

  RequestForSlowResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestForSlowResponse& from);
  void MergeFrom(const RequestForSlowResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestForSlowResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time_in_seconds_to_sleep = 1;
  bool has_time_in_seconds_to_sleep() const;
  void clear_time_in_seconds_to_sleep();
  static const int kTimeInSecondsToSleepFieldNumber = 1;
  ::google::protobuf::uint32 time_in_seconds_to_sleep() const;
  void set_time_in_seconds_to_sleep(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TestTask.Messages.RequestForSlowResponse)
 private:
  inline void set_has_time_in_seconds_to_sleep();
  inline void clear_has_time_in_seconds_to_sleep();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 time_in_seconds_to_sleep_;
  friend void  protobuf_AddDesc_proto_2fmessages_2eproto();
  friend void protobuf_AssignDesc_proto_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static RequestForSlowResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// WrapperMessage

// optional .TestTask.Messages.FastResponse fast_response = 1;
inline bool WrapperMessage::has_fast_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WrapperMessage::set_has_fast_response() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WrapperMessage::clear_has_fast_response() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WrapperMessage::clear_fast_response() {
  if (fast_response_ != NULL) fast_response_->::TestTask::Messages::FastResponse::Clear();
  clear_has_fast_response();
}
inline const ::TestTask::Messages::FastResponse& WrapperMessage::fast_response() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.WrapperMessage.fast_response)
  return fast_response_ != NULL ? *fast_response_ : *default_instance_->fast_response_;
}
inline ::TestTask::Messages::FastResponse* WrapperMessage::mutable_fast_response() {
  set_has_fast_response();
  if (fast_response_ == NULL) {
    fast_response_ = new ::TestTask::Messages::FastResponse;
  }
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.WrapperMessage.fast_response)
  return fast_response_;
}
inline ::TestTask::Messages::FastResponse* WrapperMessage::release_fast_response() {
  // @@protoc_insertion_point(field_release:TestTask.Messages.WrapperMessage.fast_response)
  clear_has_fast_response();
  ::TestTask::Messages::FastResponse* temp = fast_response_;
  fast_response_ = NULL;
  return temp;
}
inline void WrapperMessage::set_allocated_fast_response(::TestTask::Messages::FastResponse* fast_response) {
  delete fast_response_;
  fast_response_ = fast_response;
  if (fast_response) {
    set_has_fast_response();
  } else {
    clear_has_fast_response();
  }
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.WrapperMessage.fast_response)
}

// optional .TestTask.Messages.SlowResponse slow_response = 2;
inline bool WrapperMessage::has_slow_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WrapperMessage::set_has_slow_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WrapperMessage::clear_has_slow_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WrapperMessage::clear_slow_response() {
  if (slow_response_ != NULL) slow_response_->::TestTask::Messages::SlowResponse::Clear();
  clear_has_slow_response();
}
inline const ::TestTask::Messages::SlowResponse& WrapperMessage::slow_response() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.WrapperMessage.slow_response)
  return slow_response_ != NULL ? *slow_response_ : *default_instance_->slow_response_;
}
inline ::TestTask::Messages::SlowResponse* WrapperMessage::mutable_slow_response() {
  set_has_slow_response();
  if (slow_response_ == NULL) {
    slow_response_ = new ::TestTask::Messages::SlowResponse;
  }
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.WrapperMessage.slow_response)
  return slow_response_;
}
inline ::TestTask::Messages::SlowResponse* WrapperMessage::release_slow_response() {
  // @@protoc_insertion_point(field_release:TestTask.Messages.WrapperMessage.slow_response)
  clear_has_slow_response();
  ::TestTask::Messages::SlowResponse* temp = slow_response_;
  slow_response_ = NULL;
  return temp;
}
inline void WrapperMessage::set_allocated_slow_response(::TestTask::Messages::SlowResponse* slow_response) {
  delete slow_response_;
  slow_response_ = slow_response;
  if (slow_response) {
    set_has_slow_response();
  } else {
    clear_has_slow_response();
  }
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.WrapperMessage.slow_response)
}

// optional .TestTask.Messages.RequestForFastResponse request_for_fast_response = 3;
inline bool WrapperMessage::has_request_for_fast_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WrapperMessage::set_has_request_for_fast_response() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WrapperMessage::clear_has_request_for_fast_response() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WrapperMessage::clear_request_for_fast_response() {
  if (request_for_fast_response_ != NULL) request_for_fast_response_->::TestTask::Messages::RequestForFastResponse::Clear();
  clear_has_request_for_fast_response();
}
inline const ::TestTask::Messages::RequestForFastResponse& WrapperMessage::request_for_fast_response() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.WrapperMessage.request_for_fast_response)
  return request_for_fast_response_ != NULL ? *request_for_fast_response_ : *default_instance_->request_for_fast_response_;
}
inline ::TestTask::Messages::RequestForFastResponse* WrapperMessage::mutable_request_for_fast_response() {
  set_has_request_for_fast_response();
  if (request_for_fast_response_ == NULL) {
    request_for_fast_response_ = new ::TestTask::Messages::RequestForFastResponse;
  }
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.WrapperMessage.request_for_fast_response)
  return request_for_fast_response_;
}
inline ::TestTask::Messages::RequestForFastResponse* WrapperMessage::release_request_for_fast_response() {
  // @@protoc_insertion_point(field_release:TestTask.Messages.WrapperMessage.request_for_fast_response)
  clear_has_request_for_fast_response();
  ::TestTask::Messages::RequestForFastResponse* temp = request_for_fast_response_;
  request_for_fast_response_ = NULL;
  return temp;
}
inline void WrapperMessage::set_allocated_request_for_fast_response(::TestTask::Messages::RequestForFastResponse* request_for_fast_response) {
  delete request_for_fast_response_;
  request_for_fast_response_ = request_for_fast_response;
  if (request_for_fast_response) {
    set_has_request_for_fast_response();
  } else {
    clear_has_request_for_fast_response();
  }
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.WrapperMessage.request_for_fast_response)
}

// optional .TestTask.Messages.RequestForSlowResponse request_for_slow_response = 4;
inline bool WrapperMessage::has_request_for_slow_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WrapperMessage::set_has_request_for_slow_response() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WrapperMessage::clear_has_request_for_slow_response() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WrapperMessage::clear_request_for_slow_response() {
  if (request_for_slow_response_ != NULL) request_for_slow_response_->::TestTask::Messages::RequestForSlowResponse::Clear();
  clear_has_request_for_slow_response();
}
inline const ::TestTask::Messages::RequestForSlowResponse& WrapperMessage::request_for_slow_response() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.WrapperMessage.request_for_slow_response)
  return request_for_slow_response_ != NULL ? *request_for_slow_response_ : *default_instance_->request_for_slow_response_;
}
inline ::TestTask::Messages::RequestForSlowResponse* WrapperMessage::mutable_request_for_slow_response() {
  set_has_request_for_slow_response();
  if (request_for_slow_response_ == NULL) {
    request_for_slow_response_ = new ::TestTask::Messages::RequestForSlowResponse;
  }
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.WrapperMessage.request_for_slow_response)
  return request_for_slow_response_;
}
inline ::TestTask::Messages::RequestForSlowResponse* WrapperMessage::release_request_for_slow_response() {
  // @@protoc_insertion_point(field_release:TestTask.Messages.WrapperMessage.request_for_slow_response)
  clear_has_request_for_slow_response();
  ::TestTask::Messages::RequestForSlowResponse* temp = request_for_slow_response_;
  request_for_slow_response_ = NULL;
  return temp;
}
inline void WrapperMessage::set_allocated_request_for_slow_response(::TestTask::Messages::RequestForSlowResponse* request_for_slow_response) {
  delete request_for_slow_response_;
  request_for_slow_response_ = request_for_slow_response;
  if (request_for_slow_response) {
    set_has_request_for_slow_response();
  } else {
    clear_has_request_for_slow_response();
  }
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.WrapperMessage.request_for_slow_response)
}

// -------------------------------------------------------------------

// FastResponse

// required string current_date_time = 1;
inline bool FastResponse::has_current_date_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FastResponse::set_has_current_date_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FastResponse::clear_has_current_date_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FastResponse::clear_current_date_time() {
  current_date_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_current_date_time();
}
inline const ::std::string& FastResponse::current_date_time() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.FastResponse.current_date_time)
  return current_date_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FastResponse::set_current_date_time(const ::std::string& value) {
  set_has_current_date_time();
  current_date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TestTask.Messages.FastResponse.current_date_time)
}
inline void FastResponse::set_current_date_time(const char* value) {
  set_has_current_date_time();
  current_date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TestTask.Messages.FastResponse.current_date_time)
}
inline void FastResponse::set_current_date_time(const char* value, size_t size) {
  set_has_current_date_time();
  current_date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TestTask.Messages.FastResponse.current_date_time)
}
inline ::std::string* FastResponse::mutable_current_date_time() {
  set_has_current_date_time();
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.FastResponse.current_date_time)
  return current_date_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FastResponse::release_current_date_time() {
  // @@protoc_insertion_point(field_release:TestTask.Messages.FastResponse.current_date_time)
  clear_has_current_date_time();
  return current_date_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FastResponse::set_allocated_current_date_time(::std::string* current_date_time) {
  if (current_date_time != NULL) {
    set_has_current_date_time();
  } else {
    clear_has_current_date_time();
  }
  current_date_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_date_time);
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.FastResponse.current_date_time)
}

// -------------------------------------------------------------------

// SlowResponse

// required uint32 connected_client_count = 1;
inline bool SlowResponse::has_connected_client_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SlowResponse::set_has_connected_client_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SlowResponse::clear_has_connected_client_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SlowResponse::clear_connected_client_count() {
  connected_client_count_ = 0u;
  clear_has_connected_client_count();
}
inline ::google::protobuf::uint32 SlowResponse::connected_client_count() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.SlowResponse.connected_client_count)
  return connected_client_count_;
}
inline void SlowResponse::set_connected_client_count(::google::protobuf::uint32 value) {
  set_has_connected_client_count();
  connected_client_count_ = value;
  // @@protoc_insertion_point(field_set:TestTask.Messages.SlowResponse.connected_client_count)
}

// -------------------------------------------------------------------

// RequestForFastResponse

// -------------------------------------------------------------------

// RequestForSlowResponse

// required uint32 time_in_seconds_to_sleep = 1;
inline bool RequestForSlowResponse::has_time_in_seconds_to_sleep() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestForSlowResponse::set_has_time_in_seconds_to_sleep() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestForSlowResponse::clear_has_time_in_seconds_to_sleep() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestForSlowResponse::clear_time_in_seconds_to_sleep() {
  time_in_seconds_to_sleep_ = 0u;
  clear_has_time_in_seconds_to_sleep();
}
inline ::google::protobuf::uint32 RequestForSlowResponse::time_in_seconds_to_sleep() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.RequestForSlowResponse.time_in_seconds_to_sleep)
  return time_in_seconds_to_sleep_;
}
inline void RequestForSlowResponse::set_time_in_seconds_to_sleep(::google::protobuf::uint32 value) {
  set_has_time_in_seconds_to_sleep();
  time_in_seconds_to_sleep_ = value;
  // @@protoc_insertion_point(field_set:TestTask.Messages.RequestForSlowResponse.time_in_seconds_to_sleep)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages
}  // namespace TestTask

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fmessages_2eproto__INCLUDED
